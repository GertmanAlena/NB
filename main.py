import requests
import emoji
from emoji import SMILE

import telebot
import logger as log
from telebot.types import InlineKeyboardButton

import time
import config
import datetime as DT
from data_base import dbcon
from telebot import types
import sql as sql_
import threading
import notification as n

from myTime import then
from myTime import then2
from myTime import then3

bot = telebot.TeleBot(token=config.TOKEN, threaded=True)

now_time = DT.datetime.now()
# dp = Dispatcher(bot)

print('server started')
log.server_started(now_time)

db = dbcon()
sql_.create_connection_mysql_db(db)
print("..Connect")
log.log_Connect_sql()

# stop = False
print("1...")

def do_work():

    while True:
        """–º–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –ø–æ—Ç–æ–∫"""
        print("3...")
        """—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –ù–î"""
        if DT.datetime.now().strftime("%H:%M") == then3:
            print("4...")
            print("then3 ", then3)

            res = n.notif(db)
            print(res)
            for i in res:
                print("res[] ", i[2])

                params = {
                    'chat_id': i[0],
                    'text': f'{i[2]} {i[3]}\n\n–ù–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –í–∞—à–µ–º—É –¥–µ–ª—É –ø—Ä–∏—à–ª–∏ –æ—Ç–≤–µ—Ç—ã!!!'
                            f'\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É {i[10]} –≤ —Å—Ä–æ–∫ –¥–æ {i[9]}',
                }
                response = requests.get('https://api.telegram.org/bot' + config.TOKEN + '/sendMessage',
                                        params=params)
        """—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü –¥–æ —Å—Ä–æ–∫–∞ 6 –º–µ—Å—è—Ü–µ–≤"""
        if DT.datetime.now().strftime("%H:%M") == then or DT.datetime.now().strftime("%H:%M") == then2:
            print("5... if == ")
            from _locale import Error
            try:
                cursor = db.cursor()
                sql = """select * from personNotary where data_sms = ? """

                cursor.execute(sql, (DT.datetime.now().strftime("%d.%m.%Y"),))
                query_result = cursor.fetchall()
                print(len(query_result))
                if len(query_result) != 0:
                    for row in query_result:
                        print("–Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", row)
                        # log.query_res(row)
                        print(row[0])
                        params = {
                            'chat_id': row[0],
                            'text': f'{row[2]} {row[3]}\n\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É {row[10]} –≤ —Å—Ä–æ–∫ –¥–æ {row[9]}',
                        }
                        response = requests.get('https://api.telegram.org/bot' + config.TOKEN + '/sendMessage',
                                                params=params)
                        print("6...")
                        print("row[0] ", row[0])

                        sql_.otm(row[0], db)
                    time.sleep(65)
                else:
                    break

            except Error as e:

                print('Error sending message', e)
                log.log_error(e)

        else:
            print("7...")
            print("sleep if != ")
            time.sleep(30)

            print("t 2 = ", DT.datetime.now().strftime("%H:%M"))


# threaded = threading.Thread(target=do_work).start()
print("2...")

@bot.message_handler(commands=['start'])

def start(message):
    """–ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ñ–∞–º–∏–ª–∏—é –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –µ–≥–æ
    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ. –ß–µ—Ä–µ–∑ next_step_handler –ø–µ—Ä–µ–¥–∞—ë–º –≤ –º–µ—Ç–æ–¥ create_id"""
    log.log_start(message, now_time)

    photo = open('logo.jpg', 'rb')

    name = message.from_user.first_name
    if message.from_user.last_name == None:
        last_name = ""
    else:
        last_name = message.from_user.last_name
    mess = f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,</b> <b>{name} <u>{last_name}' \
           f'</u></b>\n\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ç–æ—Ä—ã –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏ –≥–æ—Ä–æ–¥–∞ –û—Ä—à–∏\n' \
           f'–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–ê–° –ø–æ –í–∞—à–µ–º—É –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º—É –¥–µ–ª—É –≤–≤–µ–¥–∏—Ç–µ ' \
           f'<b><u>{"–í–ê–®–£ –§–ê–ú–ò–õ–ò–Æ –ò –ü–û–°–õ–ï–î–ù–ò–ï 4 –¶–ò–§–†–´ –ú–û–ë–ò–õ–¨–ù–û–ì–û –¢–ï–õ–ï–§–û–ù–ê —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"}</u>\n\n{"–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ 1234"}</b>'

    bot.send_photo(message.chat.id, photo)
    msg = bot.reply_to(message, mess, parse_mode="html")
    bot.register_next_step_handler(msg, create_id)

def create_id(message):
    """–º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–º–∏–ª–∏—é –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞(ms) –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
    l_name - –∏–º—è
    tel - —Ç–µ–ª–µ—Ñ–æ–Ω
    –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ç–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—å id
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç res [—Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞ = 6 –º–µ—Å—è—Ü–µ–≤, —Ñ–∞–º–∏–ª–∏–µ–π –Ω–æ—Ç–∞—Ä–∏—É—Å–∞]
    –µ—Å–ª–∏ –Ω–µ –Ω–∞—à—ë–ª, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None"""

    mess_except = f'‚ùåoooops, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n–≤–≤–µ–¥–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ' \
           f'<b><u>{"–í–ê–®–£ –§–ê–ú–ò–õ–ò–Æ –ò –ü–û–°–õ–ï–î–ù–ò–ï 4 –¶–ò–§–†–´ –ú–û–ë–ò–õ–¨–ù–û–ì–û –¢–ï–õ–ï–§–û–ù–ê —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"}</u>\n{"–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ 1234"}</b>'

    ms = sql_.create_id_2(message)
    if ms == 0:
        bot.reply_to(message, mess_except, parse_mode="html")
    else:

        res = sql_.create_id_3(message, ms, db)
        print("res ", res)
        if res == None:
            bot.reply_to(message, mess_except, parse_mode="html")
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

            button1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
            button2 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å e-mail')
            button3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º –¥–µ–ª–µ')

            markup.add(button1, button2, button3)

            mess = f'{message.from_user.first_name} {message.from_user.last_name}' \
                   f'\n‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–∞—à –Ω–æ—Ç–∞—Ä–∏—É—Å <u><b>{res[1]}</b></u>\n–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ <u><b>{res[0]}</b></u>\n' \
                   f'\n–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –ë–ù–ü\n–∏ ' \
                   f'—Ç–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–æ—Ä –∏ –Ω–æ—Ç–∞—Ä–∏—É—Å–æ–≤'
            bot.send_message(message.chat.id, mess + '\U0001f600', reply_markup=markup, parse_mode="html")

@bot.message_handler(commands=['help'])
def help(message):
    log.log_help(message)
    l_name = message.from_user.last_name
    if l_name == None:
        l_name = " "
    mess = f'<b>{message.from_user.first_name} <u>{l_name}</u></b>\n–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–æ ' \
           f'–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã –Ω–æ—Ç–∞—Ä–∏—É—Å–æ–≤ –∏ –∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏,\n–ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É' \
           f'\n  "<b>{"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è"}"</b>\n\n–ï—Å–ª–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –≤ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç–æ—Ä—É,' \
           f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é   <b>{"–ù–∞–ø–∏—Å–∞—Ç—å e-mail"}</b>'
    bot.send_message(message.chat.id, mess, parse_mode="html")

@bot.message_handler(content_types=["sticker"])
def send_sticker(message):
    """–ü–æ–ª—É—á–∏–º ID –°—Ç–∏–∫–µ—Ä–∞"""

    sticker_id = message.sticker.file_id
    bot.send_sticker(message.chat.id, sticker_id)
    log.log_sticker(message, sticker_id)


@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':
        name = message.from_user.first_name
        if message.from_user.last_name == None:
            last_name = "!"
        else:
            last_name = message.from_user.last_name

        if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º –¥–µ–ª–µ':
            log.log_res(message)
            sign_up_for_a_month = sql_.info_srok(message.from_user.id, db)
            notarius = sql_.info_notarius(message.from_user.id, db)
            zapros = sql_.info_zapros(message.from_user.id, db)
            if zapros == None:
                zapros = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ–∂–∏–¥–∞—é—Ç—Å—è –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã," \
                         " –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –º–µ–Ω—è"

            mess = f'<b>{name} <u>{last_name}</u></b>\n\n–≤ —Å—Ä–æ–∫ –¥–æ <b>{sign_up_for_a_month}</b>' \
                   f'\n–í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É <b>{notarius}</b>' \
                   f'\n{zapros}üíÅ'
            bot.send_message(message.chat.id, mess, parse_mode="html")

        elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è':
            log.log_res(message)
            bot.send_message(message.from_user.id,
                        '–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–æ—Ä\n–†–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã –Ω–æ—Ç–∞—Ä–∏—É—Å–æ–≤\n'
                        '*–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ*\n' + '[—Å—Å—ã–ª–∫–µ](https://belnotary.by/nayti-notariusa/notariusy-belarusi/)',
                         parse_mode='Markdown')

        elif message.text == '–ù–∞–ø–∏—Å–∞—Ç—å e-mail':
            log.log_res(message)
            mess = f'<b>{message.from_user.first_name} <u>{message.from_user.last_name}</u></b>\n–≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç–æ—Ä—É' \
                   f'\n–í –∫–∞–∫—É—é –∫–æ–Ω—Ç–æ—Ä—É –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å?'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            button1 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –í–∏—Ç–µ–±—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button2 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ú–∏–Ω—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button3 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ë—Ä–µ—Å—Ç—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button4 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button5 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ì–æ–º–µ–ª—å—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button6 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ú–æ–≥–∏–ª—ë–≤—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            back = types.KeyboardButton('–ù–∞–∑–∞–¥')

            markup.add(button1, back)
            bot.send_message(message.chat.id, mess, reply_markup=markup, parse_mode="html")

        elif message.text == "–ù–∞–∑–∞–¥":
            log.log_res(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button2 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
            button3 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å e-mail')
            markup.add(button2, button3)
            bot.send_message(message.chat.id, "–ù–∞–∑–∞–¥", reply_markup=markup)

        elif message.text == "–∫–æ–Ω—Ç–æ—Ä–∞ –í–∏—Ç–µ–±—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞":

            log.log_res(message)
            mess = f'<b>{message.from_user.first_name} <u>{message.from_user.last_name}</u></b>\n–≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç–æ—Ä—É' \
                   f'\n–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            button1 = types.KeyboardButton('–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞ –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏ –≥.–û—Ä—à–∏')
            button2 = types.KeyboardButton('–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞ –≥.–ë–∞—Ä–∞–Ω–∏ –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞')

            back = types.KeyboardButton('–ù–∞–∑–∞–¥')

            markup.add(button1, button2, back)
            bot.send_message(message.chat.id, mess, reply_markup=markup, parse_mode="html")

        elif message.text == "–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞ –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏ –≥.–û—Ä—à–∏":
            log.log_res(message)
            markup = types.InlineKeyboardMarkup(row_width=2)
            button1 = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ",
                                                  url='https://notariat-orsha@mail.ru')
            button2 = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                                                  url='https://belnotary.by/nayti-notariusa/notarialnye-kontory-i-notarialnye-byuro/notarialnaya-kontora-orshanskogo-rayona-i-goroda-orshi/')
            markup.add(button1, button2)


            bot.send_message(message.chat.id, "–Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å?", reply_markup=markup)

        elif message.text == "–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞ –≥.–ë–∞—Ä–∞–Ω–∏ –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞":

            log.log_res(message)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ",
                                                  url='https://nk_barnf@mail.ru'))

            bot.send_message(message.chat.id, "–Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ?", reply_markup=markup)

        else:
            mess = f'{message.text}\n\n<b>{name} <u>{last_name}</u></b>' \
                   f'\n\n–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é!! '

            bot.send_message(message.chat.id, mess + '\U0001F534', parse_mode="html")

# stop = True
# bot.polling(none_stop=True, interval=0)
if __name__ == '__main__':
    threaded = threading.Thread(target=do_work, daemon=True).start()
    bot.polling(none_stop=True)
    # bot.start_polling(bot, skip_updates=True)