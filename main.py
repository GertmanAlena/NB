import requests
import threading
import telebot
from telebot import types
from telebot.types import InlineKeyboardButton
from telebot_calendar import Calendar, CallbackData, RUSSIAN_LANGUAGE

import logger as log
import datetime as DT
import time
import config
from data_base import dbcon
import sql as sql_
import notification as n
from _locale import Error
from myTime import then
from myTime import then3
from exel import x_file
from exel import zapis_not
import case as C
import text_messages as tm
import button_file as bf

bot = telebot.TeleBot(token=config.TOKEN, threaded=True)
now_time = DT.datetime.now()

print('server started')
log.server_started(now_time)

db = dbcon()
sql_.create_connection_mysql_db(db)
log.log_Connect_sql()

calendar = Calendar(language=RUSSIAN_LANGUAGE)
calendar_1 = CallbackData('calendar_1', 'action', 'year', 'month', 'day')

def do_work():
    """–º–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –ø–æ—Ç–æ–∫"""
    print("...1...")
    while True:
        """—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –ù–î"""
        print("...3...")
        if DT.datetime.now().strftime("%H:%M") == then3:
            res = n.notif(db)
            try:
                if res is not None:
                    for i in res:
                        params = {
                            'chat_id': i[0],
                            'text': f'{i[2]} {i[3]}\n\n–ù–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –í–∞—à–µ–º—É –¥–µ–ª—É –ø—Ä–∏—à–ª–∏ –æ—Ç–≤–µ—Ç—ã!!!'
                                    f'\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É {i[10]} –≤ —Å—Ä–æ–∫ –¥–æ {i[9]}',
                        }
                        response = requests.get('https://api.telegram.org/bot' + config.TOKEN + '/sendMessage',
                                                params=params)
                        log.replies_received(i[2], i[3])
            except Error as e:
                print('Error sending message', e)
                log.log_error(e)

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü –¥–æ —Å—Ä–æ–∫–∞ 6 –º–µ—Å—è—Ü–µ–≤
        if DT.datetime.now().strftime("%H:%M") == then:
            try:
                cursor = db.cursor()
                sql = """select * from personNotary where data_sms = ? """
                cursor.execute(sql, (DT.datetime.now().strftime("%d.%m.%Y"),))
                query_result = cursor.fetchall()
                if len(query_result) != 0:
                    for row in query_result:
                        params = {
                            'chat_id': row[0],
                            'text': f'{row[2]} {row[3]}\n\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É {row[10]} –≤ —Å—Ä–æ–∫ –¥–æ {row[9]}',
                        }
                        response = requests.get('https://api.telegram.org/bot' + config.TOKEN + '/sendMessage',
                                                params=params)
                        sql_.otm(row[0], db)
                    time.sleep(65)
                else:
                    time.sleep(30)
            except Error as e:
                print('Error sending message', e)
                log.log_error(e)
        else:
            time.sleep(30)
            print(DT.datetime.now().strftime("%H:%M"))


print("...2...")


@bot.message_handler(commands=['start'])
def start(message):
    """–ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –º–µ–Ω—é /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –µ–≥–æ
    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    log.log_start(message, now_time)

    photo = open('logo.jpg', 'rb')
    name = message.from_user.first_name
    if message.from_user.last_name is None:
        last_name = ""
    else:
        last_name = message.from_user.last_name

    mess = f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name} {last_name}</b>' + tm.text_start()


    bot.send_photo(message.chat.id, photo)
    markup = types.ReplyKeyboardMarkup(row_width=1)

    tel = types.KeyboardButton(" –ü–†–û–î–û–õ–ñ–ò–¢–¨ \n –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    markup.add(tel)

    bot.send_message(message.chat.id, mess, reply_markup=markup, parse_mode="html")


@bot.message_handler(content_types=["contact"])
def contact(message):
    telephone = message.contact.phone_number
    id_tel = message.chat.id
    res = sql_.create_reg(telephone, id_tel, db)
    if res is False:
        sql_.create_new_person(id_tel, telephone, message.from_user.first_name, message.from_user.last_name, db)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        button1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
        button2 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å e-mail')
        button3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º –¥–µ–ª–µ')
        button4 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É')

        markup.add(button1, button2, button3, button4)
        if message.from_user.first_name is not None:
            name = message.from_user.first_name
        else:
            name = ""
        if message.from_user.last_name is not None:
            last_name = message.from_user.last_name
        else:
            last_name = ""
        mess = f'{name} {last_name}' + tm.reg_ok()
        bot.send_message(message.chat.id, mess + '\U0001f600', reply_markup=markup, parse_mode="html")
    else:
        if res[3] is None:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)
            button1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
            button2 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å e-mail')
            button3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º –¥–µ–ª–µ')
            button4 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É')
            markup.add(button1, button2, button3, button4)
            mess = f'<b>{res[0]} {res[1]}</b>' + tm.reg_ok() + tm.reg_ok2()
            bot.send_message(message.chat.id, mess + '\U0001f600', reply_markup=markup, parse_mode="html")
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)
            button1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
            button2 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å e-mail')
            button3 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º –¥–µ–ª–µ')
            button4 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É')

            markup.add(button1, button2, button3, button4)

            mess = f'{res[0]} {res[1]} \n{tm.reg_ok()}' \
                   f'\n–í–∞—à –Ω–æ—Ç–∞—Ä–∏—É—Å <u><b>{res[3]}</b></u>\n' \
                   f'–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ <u><b>{res[2]}</b></u>\n{tm.reg_ok2()}'
            bot.send_message(message.chat.id, mess + '\U0001f600', reply_markup=markup, parse_mode="html")

@bot.message_handler(commands=['help'])
def help_command(message):
    log.log_help(message)
    l_name = message.from_user.last_name
    if l_name is None:
        l_name = " "
    mess = f'<b>{message.from_user.first_name} <u>{l_name}</u></b>\n–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–æ ' \
           f'–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã –Ω–æ—Ç–∞—Ä–∏—É—Å–æ–≤ –∏ –∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏,\n–ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç, ' \
           f'–Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É' \
           f'\n  "<b>{"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è"}"</b>\n\n' \
           f'–ï—Å–ª–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –≤ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç–æ—Ä—É,' \
           f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é   <b>{"–ù–∞–ø–∏—Å–∞—Ç—å e-mail"}</b>'
    bot.send_message(message.chat.id, mess, parse_mode="html")


@bot.message_handler(content_types=["sticker"])
def send_sticker(message):
    """–ü–æ–ª—É—á–∏–º ID –°—Ç–∏–∫–µ—Ä–∞"""

    sticker_id = message.sticker.file_id
    bot.send_sticker(message.chat.id, sticker_id)
    log.log_sticker(message, sticker_id)


@bot.message_handler(content_types=['text'])
def bot_message(message):
    """
    :param message:
    :return:
    sign_up_for_a_month —Å—Ä–æ–∫ –∏–∑–≤–µ—â–µ–Ω–∏—è
    """
    if message.chat.type == 'private':
        name = message.from_user.first_name
        if message.from_user.last_name is None:
            last_name = ""
        else:
            last_name = message.from_user.last_name

        if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º –¥–µ–ª–µ':
            log.log_res(message)
            sign_up_for_a_month = sql_.info_srok(message.from_user.id, db)
            print('sign', sign_up_for_a_month)
            notarius = sql_.info_notarius(message.from_user.id, db)
            print('notarius', notarius)
            zapros = sql_.info_zapros(message.from_user.id, db)
            print('zapros', zapros)
            if notarius is None:
                mess = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ–ª–æ –≤ –±–∞–∑–µ. ' \
                       '–£—Ç–æ—á–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû +375 216 56-88-94'
                bot.send_message(message.chat.id, mess)

            elif zapros is None:
                zapros = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –æ–∂–∏–¥–∞—é—Ç—Å—è –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã," \
                         " –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –º–µ–Ω—è"
                mess = f'<b>{name} <u>{last_name}</u></b>\n\n–≤ —Å—Ä–æ–∫ –¥–æ <b>{sign_up_for_a_month}</b>' \
                       f'\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É <b>{notarius}</b>' \
                       f'\n{zapros}üíÅ'
                bot.send_message(message.chat.id, mess, parse_mode="html")
                bot.send_message(message.from_user.id,
                                 '–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –¥–µ–ª–µ –Ω–∞ '
                                 '–û–§–ò–¶–ò–ê–õ–¨–ù–û–ú —Å–∞–π—Ç–µ –Ω–æ—Ç–∞—Ä–∏–∞—Ç–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å\n'
                                 '*–ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ*\n' + '\u261E' + '[–ù–ê–ñ–ú–ò –¢–£–¢](https://enotary.by/#/legacy/)',
                                 parse_mode='Markdown')
            else:
                zapros = f'<b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—É—á–µ–Ω—ã, –æ–± —ç—Ç–æ–º –í—ã –±—ã–ª–∏ </b>'
                mess = f'<b>{name} <u>{last_name}</u></b>\n\n–≤ —Å—Ä–æ–∫ –¥–æ <b>{sign_up_for_a_month}</b>' \
                       f'\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É <b>{notarius}</b>' \
                       f'\n{zapros}üíÅ'
                bot.send_message(message.chat.id, mess, parse_mode="html")
                bot.send_message(message.from_user.id,
                                 '–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º –¥–µ–ª–µ –Ω–∞ '
                                 '–û–§–ò–¶–ò–ê–õ–¨–ù–û–ú —Å–∞–π—Ç–µ –Ω–æ—Ç–∞—Ä–∏–∞—Ç–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ë–µ–ª–∞—Ä—É—Å—å\n'
                                 '*–ü–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ*\n' + '\u261E' + '[–ù–ê–ñ–ú–ò –¢–£–¢](https://enotary.by/#/legacy/)',
                                 parse_mode='Markdown')
        elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è':
            log.log_res(message)
            bot.send_message(message.from_user.id,
                             '–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–æ—Ä\n–†–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã –Ω–æ—Ç–∞—Ä–∏—É—Å–æ–≤\n'
                             '*–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ*\n' + '[—Å—Å—ã–ª–∫–µ](https://belnotary.by/nayti-notariusa/notariusy-belarusi/)',
                             parse_mode='Markdown')

        elif message.text == '–ù–∞–ø–∏—Å–∞—Ç—å e-mail':
            log.log_res(message)
            mess = f'<b>{message.from_user.first_name} <u>{message.from_user.last_name}</u></b>\n' \
                   f'–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç–æ—Ä—É' \
                   f'\n–í –∫–∞–∫—É—é –∫–æ–Ω—Ç–æ—Ä—É –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å?'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            button1 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –í–∏—Ç–µ–±—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button2 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ú–∏–Ω—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button3 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ë—Ä–µ—Å—Ç—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button4 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button5 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ì–æ–º–µ–ª—å—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            # button6 = types.KeyboardButton('–∫–æ–Ω—Ç–æ—Ä–∞ –ú–æ–≥–∏–ª—ë–≤—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞')
            back = types.KeyboardButton('–ù–∞–∑–∞–¥')

            markup.add(button1, back)
            bot.send_message(message.chat.id, mess, reply_markup=markup, parse_mode="html")

        elif message.text == "–ù–∞–∑–∞–¥":
            log.log_res(message)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)

            button1 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—ë–º –¥–µ–ª–µ')
            button2 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
            button3 = types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å e-mail')
            button4 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É')

            markup.add(button1, button2, button3, button4)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ", reply_markup=markup)

        elif message.text == "–∫–æ–Ω—Ç–æ—Ä–∞ –í–∏—Ç–µ–±—Å–∫–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞":
            log.log_res(message)
            mess = f'<b>{message.from_user.first_name} <u>{message.from_user.last_name}</u></b>\n' \
                   f'–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç–æ—Ä—É' \
                   f'\n–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            button1 = types.KeyboardButton('–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞ –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏ –≥.–û—Ä—à–∏')
            button2 = types.KeyboardButton('–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞ –≥.–ë–∞—Ä–∞–Ω–∏ –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞')

            back = types.KeyboardButton('–ù–∞–∑–∞–¥')

            markup.add(button1, button2, back)
            bot.send_message(message.chat.id, mess, reply_markup=markup, parse_mode="html")

        elif message.text == "–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞ –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏ –≥.–û—Ä—à–∏":
            log.log_res(message)
            markup = types.InlineKeyboardMarkup(row_width=2)
            button1 = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ",
                                           url='https://notariat-orsha@mail.ru')
            button2 = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ –ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                                           url='https://belnotary.by/nayti-notariusa/notarialnye-kontory-i-notarialnye-byuro/notarialnaya-kontora-orshanskogo-rayona-i-goroda-orshi/')
            markup.add(button1, button2)

            bot.send_message(message.chat.id, "–Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å?", reply_markup=markup)

        elif message.text == "–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞ –≥.–ë–∞—Ä–∞–Ω–∏ –û—Ä—à–∞–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞":

            log.log_res(message)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ",
                                                  url='https://nk_barnf@mail.ru'))

            bot.send_message(message.chat.id, "–Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ?", reply_markup=markup)
        elif message.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É':
            # log.log_res(message)
            mess = f'<b>{name} <u>{last_name}</u>\n\n—á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —É –Ω–æ—Ç–∞—Ä–∏—É—Å–∞?</b>üìÑ'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)

            markup.add(bf.button_power_of_attorney, bf.button_will, bf.button_agreement, bf.button_statement,
                       bf.button_consultation, bf.button_other_action, bf.back)

            bot.send_message(message.from_user.id, mess, reply_markup=markup, parse_mode="html")
        elif message.text == '‚úîÔ∏è–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å':
            print(">>>1")
            # log.log_res(message)
            power_of_attorney = "–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
            mess = f'<b>{name} <u>{last_name}</u>\n\n–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è,' \
                   f' —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å {power_of_attorney} ??üóìÔ∏è</b>'

            bot.send_message(message.chat.id, mess, reply_markup=calendar.create_calendar(
                name=calendar_1.prefix,
                year=now_time.year,
                month=now_time.month), parse_mode="html")
        elif message.text == '‚úîÔ∏è–ó–∞–≤–µ—â–∞–Ω–∏–µ':
            # log.log_res(message)
            power_of_attorney = "–ó–∞–≤–µ—â–∞–Ω–∏–µ"
            mess = f'<b>{name} <u>{last_name}</u>\n\n–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è,' \
                   f' —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å {power_of_attorney} ??üóìÔ∏è</b>'

            bot.send_message(message.chat.id, mess, reply_markup=calendar.create_calendar(
                name=calendar_1.prefix,
                year=now_time.year,
                month=now_time.month), parse_mode="html")
        elif message.text == '‚úîÔ∏è–°–æ–≥–ª–∞—Å–∏–µ':
            # log.log_res(message)
            power_of_attorney = "–°–æ–≥–ª–∞—Å–∏–µ"
            mess = f'<b>{name} <u>{last_name}</u>\n\n–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è,' \
                   f' —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å {power_of_attorney} ??üóìÔ∏è</b>'

            bot.send_message(message.chat.id, mess, reply_markup=calendar.create_calendar(
                name=calendar_1.prefix,
                year=now_time.year,
                month=now_time.month), parse_mode="html")
        elif message.text == '‚úîÔ∏è–ó–∞—è–≤–ª–µ–Ω–∏–µ':
            # log.log_res(message)
            power_of_attorney = "–ó–∞—è–≤–ª–µ–Ω–∏–µ"
            mess = f'<b>{name} <u>{last_name}</u>\n\n–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è,' \
                   f' —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å {power_of_attorney} ??üóìÔ∏è</b>'

            bot.send_message(message.chat.id, mess, reply_markup=calendar.create_calendar(
                name=calendar_1.prefix,
                year=now_time.year,
                month=now_time.month), parse_mode="html")
        elif message.text == '‚úîÔ∏è–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è':
            print(">>>1")
            # log.log_res(message)
            power_of_attorney = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            mess = f'<b>{name} <u>{last_name}</u>\n\n–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è,' \
                   f' —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å {power_of_attorney} ??üóìÔ∏è</b>'

            bot.send_message(message.chat.id, mess, reply_markup=calendar.create_calendar(
                name=calendar_1.prefix,
                year=now_time.year,
                month=now_time.month), parse_mode="html")
        elif message.text == '‚úîÔ∏è–∏–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ':
            # log.log_res(message)
            mess = f'<u>{name} {last_name}</u>\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ–ª–µ–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è ' \
                   f'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ ' \
                   f'–í–∞–º –ø–µ—Ä–µ—á–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ª–∏–±–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É üìû +375 216 56-88-94'
            markup_all = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)

            markup_all.add(bf.button_info_delo, bf.button_website, bf.button_mail, bf.button_entry, bf.back)
            bot.send_message(message.chat.id, mess, reply_markup=markup_all, parse_mode="html")
        else:
            mess = f'{message.text}\n\n<b>{name} <u>{last_name}</u></b>' \
                   f'\n\n–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é!! '
            bot.send_message(message.chat.id, mess + '\U0001F534', parse_mode="html")


def notarius_time(message, d, power_of_attorney):
    """
    :param power_of_attorney:
    :param message: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ—Ç–æ–¥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–æ—Ç–∞—Ä–∏—É—Å–æ–º
    :param d: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏
    notarius —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –§–∞–º–∏–ª–∏—é –∏–Ω–∏—Ü–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–æ—Ç–∞—Ä–∏—É—Å–∞
    free_time —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑  x_file(d, notarius)
    time_work —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–æ—Ç–∞—Ä–∏—É—Å–∞ –≤–∑—è—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–æ—Ç–∞—Ä–∏—É—Å—É –≤ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
    –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–≤–æ–¥—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ—Ç–æ–¥ zapis
    :return: —Å–ø–∏—Å–æ–∫ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    """
    notarius = ''
    free_time = []
    time_work = ''

    if message.chat.type == 'private':
        name = message.from_user.first_name
        if message.from_user.last_name is None:
            last_name = ""
        else:
            last_name = message.from_user.last_name
    try:
        if message.text == "–ù–∞–∑–∞–¥":
            bot_message(message)
        elif message.text == "üü°Ô∏è –ì–æ–≥–æ–ª—å –ù.–ê.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)  # –ø–æ –¥–Ω—é –∏ –Ω–æ—Ç–∞—Ä–∏—É—Å—É –Ω–∞–π–¥—ë–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –°–æ–π–∫–∞ –ï.–Ø.":
            notarius = message.text.split(" ")[1]
            print(notarius)
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –î—É–º–∞–Ω–æ–≤–∞ –ò.–ù.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == 'üü°Ô∏è –ö–æ–≤–∞–ª–µ–≤—Å–∫–∞—è –ê.–ì.':
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –°–∏–ª—å—á–µ–Ω–∫–æ –ê.–í.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –Æ.–ü.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –ß–∏–∫–∞–Ω –ù.–ú.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –ö–æ—Ç–∏–∫–æ–≤–∞ –û.–í.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –®–∏–Ω–∫–µ–≤–∏—á –ï.–ê.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –ü–æ–∑–¥–Ω—è–∫–æ–≤–∞ –°.–ï.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]
        elif message.text == "üü°Ô∏è –î–µ–º–∏–¥–æ–≤–∞ –í.–ì.":
            notarius = message.text.split(" ")[1]
            free_time = x_file(d, notarius)
            time_work = free_time[0]

        if time_work == "–≤—ã—Ö–æ–¥–Ω–æ–π":

            mess = bot.send_message(message.from_user.id,
                                    text=f'<b>{name} <u>{last_name}</u>\n\nÔ∏è'
                                         f'–ù–æ—Ç–∞—Ä–∏—É—Å {C.notarius_name(notarius)}</b>\n'
                                         f'{d} ‚Äº –ù–ï –†–ê–ë–û–¢–ê–ï–¢ ‚Äº\nÔ∏è'
                                         f'\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É',
                                    parse_mode="html")
            mess2 = f'\n<b>{name} <u>{last_name}</u>\n\n–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è,' \
                    f' —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å {power_of_attorney} ??üóìÔ∏è</b>'
            bot.send_message(message.chat.id, mess2, reply_markup=calendar.create_calendar(
                name=calendar_1.prefix,
                year=now_time.year,
                month=now_time.month), parse_mode="html")
        elif notarius == '':
            mess = f'\n<b>{name} <u>{last_name}</u>\n\n–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>'
            markup_exception = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup_exception.add(button1)
            bot.send_message(message.chat.id, mess, reply_markup=markup_exception, parse_mode="html")
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            for i in range(1, len(free_time)):
                button = types.KeyboardButton(free_time[i])
                markup.add(button)
            back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.add(back)
            mess = bot.send_message(message.from_user.id,
                                    text=f'<b>{name} <u>{last_name}</u>\n\n'
                                         f'–ù–æ—Ç–∞—Ä–∏—É—Å {C.notarius_name(notarius)}</b>\n—Ä–∞–±–æ—Ç–∞–µ—Ç {time_work}\n'
                                         f'\n–≤—ã–±–µ—Ä–∞–π—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –í–∞—Å –∑–∞–ø–∏—Å–∞—Ç—åüïò',
                                    reply_markup=markup, parse_mode="html")
            bot.register_next_step_handler(mess, zapis, notarius, d, power_of_attorney)
    except Exception as e:
        print("Error>>> 397", e.args[0])
        if e.args[0] == "list index out of range":
            mess = f'\n<b>{name} <u>{last_name}</u>\n\n–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑</b>'
            markup_exception = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup_exception.add(button1)
            bot.send_message(message.chat.id, mess, reply_markup=markup_exception, parse_mode="html")
        else:
            mess = f'\n<b>{name} <u>{last_name}</u>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑</b>'
            markup_exception = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup_exception.add(button1)
            bot.send_message(message.chat.id, mess, reply_markup=markup_exception, parse_mode="html")


def zapis(message, notarius, d, notarial_document):
    """
    –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É
    :param notarial_document: –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    :param message: –≤—Ä–µ–º—è
    :param notarius: –Ω–æ—Ç–∞—Ä–∏—É—Å
    :param d: –¥–∞—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
    :return:
    –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ–∞–π–ª exel -> zapis_not(time_records, notarius, d)
    """
    if message.chat.type == 'private':
        name = message.from_user.first_name
        if message.from_user.last_name is None:
            last_name = ""
        else:
            last_name = message.from_user.last_name
    if message.text == "start":
        start(message)
    if message.text != "start":
        if message.text == "08:00":
            time_records = message.text
        elif message.text == "09:00":
            time_records = message.text
        elif message.text == "10:00":
            time_records = message.text
        elif message.text == "11:00":
            time_records = message.text
        elif message.text == "12:00":
            time_records = message.text
        elif message.text == "13:00":
            time_records = message.text
        elif message.text == "14:00":
            time_records = message.text
        elif message.text == "15:00":
            time_records = message.text
        elif message.text == "16:00":
            time_records = message.text
        elif message.text == "17:00":
            time_records = message.text
        elif message.text == "18:00":
            time_records = message.text

        id_tel = message.chat.id
        tel = sql_.info_id(id_tel, db)
        print("+++++tel ", tel)
        bol = zapis_not(time_records, notarius, d, notarial_document, name, last_name, tel)
        if bol:
            mess = f'<b>{name} <u>{last_name}</u>\n\n‚úî–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É {C.notarius_name(notarius)} \n{d} –≤ {time_records}</b>' \
                   f'\n{C.documents(notarial_document)}'

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

            back = types.KeyboardButton('–ù–∞–∑–∞–¥')

            markup.add(back)
            bot.send_message(message.from_user.id, mess, reply_markup=markup, parse_mode="html")
        else:
            bot_message(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith(calendar_1.prefix))
def callback_inline(call: types.CallbackQuery):
    print("callback")
    power_of_attorney = call.message.text.split(" ")[9]
    print(">power_of_attorney>> ", power_of_attorney)
    name, action, year, month, day = call.data.split(calendar_1.sep)
    date = calendar.calendar_query_handler(bot=bot, call=call, name=name, action=action, year=year,
                                           month=month, day=day)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    button1 = types.KeyboardButton('üü°Ô∏è –ì–æ–≥–æ–ª—å –ù.–ê.')
    button2 = types.KeyboardButton('üü°Ô∏è –°–æ–π–∫–∞ –ï.–Ø.')
    button3 = types.KeyboardButton('üü°Ô∏è –î–µ–º–∏–¥–æ–≤–∞ –í.–ì.')
    button4 = types.KeyboardButton('üü°Ô∏è –î—É–º–∞–Ω–æ–≤–∞ –ò.–ù.')
    button5 = types.KeyboardButton('üü°Ô∏è –ö–æ–≤–∞–ª–µ–≤—Å–∫–∞—è –ê.–ì.')
    button6 = types.KeyboardButton('üü°Ô∏è –°–∏–ª—å—á–µ–Ω–∫–æ –ê.–í.')
    button7 = types.KeyboardButton('üü°Ô∏è –ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –Æ.–ü.')
    button8 = types.KeyboardButton('üü°Ô∏è –ß–∏–∫–∞–Ω –ù.–ú.')
    button9 = types.KeyboardButton('üü°Ô∏è –ö–æ—Ç–∏–∫–æ–≤–∞ –û.–í.')
    button10 = types.KeyboardButton('üü°Ô∏è –®–∏–Ω–∫–µ–≤–∏—á –ï.–ê.')
    button11 = types.KeyboardButton('üü°Ô∏è –ü–æ–∑–¥–Ω—è–∫–æ–≤–∞ –°.–ï.')
    back = types.KeyboardButton('–ù–∞–∑–∞–¥')

    markup.add(button1, button2, button3, button4, button5, button6,
               button7, button8, button9, button10, button11, back)

    if action == 'DAY':
        message_day = bot.send_message(chat_id=call.from_user.id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{date.strftime("%d.%m.%Y")}</b> '
                                                                       f'\n<u>–£–ö–ê–ñ–ò–¢–ï</u> –∫ –∫–∞–∫–æ–º—É –Ω–æ—Ç–∞—Ä–∏—É—Å—É –≤—ã —Ö–æ—Ç–∏—Ç–µ '
                                                                       f'–∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
                                       reply_markup=markup, parse_mode="html")
        d = date.strftime("%d.%m.%Y")
        bot.register_next_step_handler(message_day, notarius_time, d, power_of_attorney)

    elif action == 'CANCEL':
        markup_all = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
        markup_all.add(bf.button_info_delo, bf.button_website, bf.button_mail, bf.button_entry)
        bot.send_message(chat_id=call.from_user.id, text='–û—Ç–º–µ–Ω–∞', reply_markup=markup_all)

if __name__ == '__main__':
    threaded = threading.Thread(target=do_work, daemon=True).start()
    bot.polling(none_stop=True)
